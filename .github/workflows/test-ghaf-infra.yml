# SPDX-FileCopyrightText: 2022-2025 TII (SSRC) and the Ghaf contributors
# SPDX-License-Identifier: Apache-2.0

name: Build and test

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main

permissions:
  contents: read

jobs:
  authorize:
    # Important: 'authorize' must run before checkout to ensure 'authorize.yml'
    # runs the base version, not the untrusted version from the PR.
    uses: ./.github/workflows/authorize.yml
    # Skip running in forked repositories, since the workflow run would fail
    # due to missing repository secret(s):
    if: ${{ github.repository == 'tiiuae/ghaf-infra' }}
    with:
      github-org: tiiuae
    secrets:
      read-org-members: ${{ secrets.READ_ORG_MEMBERS }}
  build_matrix:
    name: "build"
    needs: [authorize]
    if: needs.authorize.outputs.result == 'authorized'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    strategy:
      matrix:
        include:
          - arch: x86_64-linux
          - arch: aarch64-linux
    concurrency:
      # Cancel any in-progress workflow runs from the same PR or branch,
      # allowing matrix jobs to run concurrently:
      group: ${{ github.workflow }}.${{ github.event.pull_request.number || github.ref }}.${{ matrix.arch }}
      cancel-in-progress: true
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit
      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.BUILDER_SSH_KEY }}
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          fetch-depth: 0
          persist-credentials: false
      - name: Install nix
        uses: cachix/install-nix-action@17fe5fb4a23ad6cbbe47d6b3f359611ad276644c # v31
      - name: Add builders to ssh_known_hosts
        shell: bash
        run: |
          sudo sh -c "echo '${BUILDER_SSH_KNOWN_HOST}' >>/etc/ssh/ssh_known_hosts"
        env:
          BUILDER_SSH_KNOWN_HOST: '${{ vars.BUILDER_SSH_KNOWN_HOST }}'
      - name: Build ${{ matrix.arch }}
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "x86_64-linux" ]; then
            BUILDER="${BUILDER_X86}"
            # x86 targets: all nixosConfigurations except hetzarm, also build x86 devShell
            FILTER='(^nixosConfigurations\.((?!hetzarm).)*$|^devShells.x86_64-linux.*$)'
          elif [ "${{ matrix.arch }}" == "aarch64-linux" ]; then
            BUILDER="${BUILDER_AARCH}"
            # aarch64 targets: hetzarm nixosConfiguration
            FILTER='^nixosConfigurations.*hetzarm.*'
          else
            echo "::error::Unknown architecture: '${{ matrix.arch }}'"
            exit 1
          fi
          OPTS="--remote $BUILDER --no-download --skip-cached --option accept-flake-config true"
          # Build 'checks' on both x86 and aarch
          ./scripts/nix-fast-build.sh -t "checks" -o "$OPTS"
          # Build arch-specific targets based on FILTER
          ./scripts/nix-fast-build.sh -f "$FILTER" -o "$OPTS"
        env:
          BUILDER_X86: ${{ vars.BUILDER_X86 }}
          BUILDER_AARCH: ${{ vars.BUILDER_AARCH }}
